// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  phone           String?
  nationalCode    String?
  email           String   @unique
  isEmailVerified Boolean  @default(false)
  hashedPassword  String
  hasUsedTrial    Boolean  @default(false)
  canCreateStore  Boolean  @default(false)
  store           Store[]  @relation("StoreToUser")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Customer {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  phone           String
  hashedOTP       String
  storeId         String            @db.ObjectId
  store           Store             @relation(fields: [storeId], references: [id])
  cartItem        CartItem[]
  customerAddress CustomerAddress[]
  order           Order[]

  @@unique([storeId, phone], name: "customerIdentifier")
}

model CustomerAddress {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  address             String
  province            String
  city                String
  postCode            String
  recieverName        String
  recieverPhoneNumber String
  customer            Customer @relation(fields: [customerId], references: [id])
  customerId          String   @db.ObjectId
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt()
  order               Order[]
}

model Store {
  id                String          @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  description       String?
  logoUrl           String?
  isTest            Boolean         @default(false)
  isDeployed        Boolean         @default(false)
  userId            String          @db.ObjectId
  user              User            @relation("StoreToUser", fields: [userId], references: [id])
  categories        Category[]      @relation("CategoryToStore")
  themeColor        String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  shippingRates     ShippingRate[]  @relation("ShippingRateToStore")
  banners           Banner[]        @relation("BannerToStore")
  bannerUrl         String?
  products          Product[]       @relation("ProductToStore")
  productOptions    ProductOption[]
  variants          Variant[]
  customers         Customer[]
  cartItem          CartItem[]
  order             Order[]
  trialStart        DateTime?
  trialEnd          DateTime?
  subscriptionStart DateTime?
  subscriptionEnd   DateTime?
}

model Category {
  id               String     @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  storeId          String     @db.ObjectId
  store            Store      @relation("CategoryToStore", fields: [storeId], references: [id])
  parentCategoryId String?    @db.ObjectId
  parentCategory   Category?  @relation("Category", fields: [parentCategoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subcategories    Category[] @relation("Category")
  bannerId         String?    @db.ObjectId
  banner           Banner?    @relation("CategoryToBanner", fields: [bannerId], references: [id])
  isArchived       Boolean    @default(false)
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  products         Product[]
}

model ShippingRate {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  price       Int
  minPrice    Int?
  isArchived  Boolean  @default(false)
  storeId     String   @db.ObjectId
  store       Store    @relation("ShippingRateToStore", fields: [storeId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  order       Order[]
}

model Banner {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  imageUrl   String
  isArchived Boolean    @default(false)
  storeId    String     @db.ObjectId
  store      Store      @relation("BannerToStore", fields: [storeId], references: [id])
  categories Category[] @relation("CategoryToBanner")
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Product {
  id                 String           @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  description        Json?
  quantity           Int
  price              Int
  priceAfterDiscount Int?
  costAtPrice        Int?
  unit               String?
  features           ProductFeature[]
  options            ProductOption[]
  variants           Variant[]
  storeId            String           @db.ObjectId
  store              Store            @relation("ProductToStore", fields: [storeId], references: [id])
  mainImageUrl       String
  categoryId         String?          @db.ObjectId
  category           Category?        @relation(fields: [categoryId], references: [id])
  images             Image[]
  isDiscounted       Boolean          @default(false)
  isFeatured         Boolean          @default(false)
  isArchived         Boolean          @default(false)
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  cartItem           CartItem[]
}

model Image {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  imageUrl  String
  product   Product? @relation(fields: [productId], references: [id])
  productId String?  @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductOption {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  values    String[]
  storeId   String   @db.ObjectId
  store     Store    @relation(fields: [storeId], references: [id])
  product   Product? @relation(fields: [productId], references: [id])
  productId String?  @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Variant {
  id                 String     @id @default(auto()) @map("_id") @db.ObjectId
  options            String[]
  price              Int
  priceAfterDiscount Int?
  quantity           Int
  storeId            String     @db.ObjectId
  store              Store      @relation(fields: [storeId], references: [id])
  product            Product?   @relation(fields: [productId], references: [id])
  productId          String?    @db.ObjectId
  cartItem           CartItem[]
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
}

model ProductFeature {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  value     String
  product   Product? @relation(fields: [productId], references: [id])
  productId String?  @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  product    Product   @relation(fields: [productId], references: [id])
  productId  String    @db.ObjectId
  variant    Variant?  @relation(fields: [variantId], references: [id])
  variantId  String?   @db.ObjectId
  quantity   Int
  deviceId   String?
  customer   Customer? @relation(fields: [customerId], references: [id])
  customerId String?   @db.ObjectId
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  store      Store     @relation(fields: [storeId], references: [id])

  storeId String  @db.ObjectId
  order   Order?  @relation(fields: [orderId], references: [id])
  orderId String? @db.ObjectId
}

model Order {
  id                String          @id @default(auto()) @map("_id") @db.ObjectId
  customer          Customer        @relation(fields: [customerId], references: [id])
  cartItems         CartItem[]
  cartItemIds       String[]
  address           CustomerAddress @relation(fields: [customerAddressId], references: [id])
  isPaid            Boolean         @default(false)
  hasSent           Boolean         @default(false)
  customerAddressId String          @db.ObjectId
  shipping          ShippingRate    @relation(fields: [shippingRateId], references: [id])
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  shippingRateId    String          @db.ObjectId
  customerId        String          @db.ObjectId
  store             Store           @relation(fields: [storeId], references: [id])
  storeId           String          @db.ObjectId
}
